package net.lingala.zip4j.crypto.engine;

import android.support.v7.widget.helper.ItemTouchHelper.Callback;
import com.google.android.exoplayer2.extractor.ts.PsExtractor;
import com.google.android.exoplayer2.extractor.ts.TsExtractor;
import com.google.common.base.Ascii;
import ir.mahdi.mzip.rar.unpack.ppm.ModelPPM;
import java.lang.reflect.Array;
import net.lingala.zip4j.exception.ZipException;
import org.mozilla.universalchardet.prober.CharsetProber;
import org.mozilla.universalchardet.prober.HebrewProber;
import org.mozilla.universalchardet.prober.contextanalysis.EUCJPContextAnalysis;
import org.mozilla.universalchardet.prober.contextanalysis.SJISContextAnalysis;
import org.mozilla.universalchardet.prober.distributionanalysis.Big5DistributionAnalysis;
import org.mozilla.universalchardet.prober.distributionanalysis.EUCTWDistributionAnalysis;

public class AESEngine {
    /* renamed from: S */
    private static final byte[] f64S;
    private static final int[] T0;
    private static final int[] rcon = new int[]{1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145};
    private int C0;
    private int C1;
    private int C2;
    private int C3;
    private int rounds;
    private int[][] workingKey = null;

    private int shift(int i, int i2) {
        return (i << (-i2)) | (i >>> i2);
    }

    public AESEngine(byte[] bArr) throws ZipException {
        init(bArr);
    }

    public void init(byte[] bArr) throws ZipException {
        this.workingKey = generateWorkingKey(bArr);
    }

    private int[][] generateWorkingKey(byte[] bArr) throws ZipException {
        int length = bArr.length / 4;
        if ((length == 4 || length == 6 || length == 8) && length * 4 == bArr.length) {
            this.rounds = length + 6;
            int[][] iArr = (int[][]) Array.newInstance(int.class, new int[]{this.rounds + 1, 4});
            int i = 0;
            int i2 = 0;
            while (i < bArr.length) {
                iArr[i2 >> 2][i2 & 3] = (((bArr[i] & 255) | ((bArr[i + 1] & 255) << 8)) | ((bArr[i + 2] & 255) << 16)) | (bArr[i + 3] << 24);
                i += 4;
                i2++;
            }
            int i3 = (this.rounds + 1) << 2;
            for (bArr = length; bArr < i3; bArr++) {
                i = bArr - 1;
                i = iArr[i >> 2][i & 3];
                i2 = bArr % length;
                if (i2 == 0) {
                    i = subWord(shift(i, 8)) ^ rcon[(bArr / length) - 1];
                } else if (length > 6 && i2 == 4) {
                    i = subWord(i);
                }
                int i4 = bArr - length;
                iArr[bArr >> 2][bArr & 3] = i ^ iArr[i4 >> 2][i4 & 3];
            }
            return iArr;
        }
        throw new ZipException("invalid key length (not 128/192/256)");
    }

    public int processBlock(byte[] bArr, byte[] bArr2) throws ZipException {
        return processBlock(bArr, 0, bArr2, 0);
    }

    public int processBlock(byte[] bArr, int i, byte[] bArr2, int i2) throws ZipException {
        if (this.workingKey == null) {
            throw new ZipException("AES engine not initialised");
        } else if (i + 16 > bArr.length) {
            throw new ZipException("input buffer too short");
        } else if (i2 + 16 > bArr2.length) {
            throw new ZipException("output buffer too short");
        } else {
            stateIn(bArr, i);
            encryptBlock(this.workingKey);
            stateOut(bArr2, i2);
            return 16;
        }
    }

    private final void stateIn(byte[] bArr, int i) {
        int i2 = i + 1;
        this.C0 = bArr[i] & 255;
        int i3 = i2 + 1;
        this.C0 |= (bArr[i2] & 255) << 8;
        i2 = i3 + 1;
        this.C0 |= (bArr[i3] & 255) << 16;
        i3 = i2 + 1;
        this.C0 |= bArr[i2] << 24;
        i = i3 + 1;
        this.C1 = bArr[i3] & 255;
        i3 = i + 1;
        this.C1 = ((bArr[i] & 255) << 8) | this.C1;
        i2 = i3 + 1;
        this.C1 |= (bArr[i3] & 255) << 16;
        i3 = i2 + 1;
        this.C1 |= bArr[i2] << 24;
        i = i3 + 1;
        this.C2 = bArr[i3] & 255;
        i3 = i + 1;
        this.C2 = ((bArr[i] & 255) << 8) | this.C2;
        i2 = i3 + 1;
        this.C2 |= (bArr[i3] & 255) << 16;
        i3 = i2 + 1;
        this.C2 |= bArr[i2] << 24;
        i = i3 + 1;
        this.C3 = bArr[i3] & 255;
        i3 = i + 1;
        this.C3 = ((bArr[i] & 255) << 8) | this.C3;
        i2 = i3 + 1;
        this.C3 |= (bArr[i3] & 255) << 16;
        this.C3 = (bArr[i2] << 24) | this.C3;
    }

    private final void stateOut(byte[] bArr, int i) {
        int i2 = i + 1;
        bArr[i] = (byte) this.C0;
        i = i2 + 1;
        bArr[i2] = (byte) (this.C0 >> 8);
        i2 = i + 1;
        bArr[i] = (byte) (this.C0 >> 16);
        i = i2 + 1;
        bArr[i2] = (byte) (this.C0 >> 24);
        i2 = i + 1;
        bArr[i] = (byte) this.C1;
        i = i2 + 1;
        bArr[i2] = (byte) (this.C1 >> 8);
        i2 = i + 1;
        bArr[i] = (byte) (this.C1 >> 16);
        i = i2 + 1;
        bArr[i2] = (byte) (this.C1 >> 24);
        i2 = i + 1;
        bArr[i] = (byte) this.C2;
        i = i2 + 1;
        bArr[i2] = (byte) (this.C2 >> 8);
        i2 = i + 1;
        bArr[i] = (byte) (this.C2 >> 16);
        i = i2 + 1;
        bArr[i2] = (byte) (this.C2 >> 24);
        i2 = i + 1;
        bArr[i] = (byte) this.C3;
        i = i2 + 1;
        bArr[i2] = (byte) (this.C3 >> 8);
        i2 = i + 1;
        bArr[i] = (byte) (this.C3 >> 16);
        bArr[i2] = (byte) (this.C3 >> 24);
    }

    private final void encryptBlock(int[][] iArr) {
        int shift;
        int shift2;
        this.C0 ^= iArr[0][0];
        this.C1 ^= iArr[0][1];
        this.C2 ^= iArr[0][2];
        int i = 3;
        this.C3 ^= iArr[0][3];
        int i2 = 1;
        while (i2 < r0.rounds - 1) {
            shift = (((T0[r0.C0 & 255] ^ shift(T0[(r0.C1 >> 8) & 255], 24)) ^ shift(T0[(r0.C2 >> 16) & 255], 16)) ^ shift(T0[(r0.C3 >> 24) & 255], 8)) ^ iArr[i2][0];
            i = (((T0[r0.C1 & 255] ^ shift(T0[(r0.C2 >> 8) & 255], 24)) ^ shift(T0[(r0.C3 >> 16) & 255], 16)) ^ shift(T0[(r0.C0 >> 24) & 255], 8)) ^ iArr[i2][1];
            shift2 = (((T0[r0.C2 & 255] ^ shift(T0[(r0.C3 >> 8) & 255], 24)) ^ shift(T0[(r0.C0 >> 16) & 255], 16)) ^ shift(T0[(r0.C1 >> 24) & 255], 8)) ^ iArr[i2][2];
            int i3 = i2 + 1;
            i2 = iArr[i2][3] ^ (((T0[r0.C3 & 255] ^ shift(T0[(r0.C0 >> 8) & 255], 24)) ^ shift(T0[(r0.C1 >> 16) & 255], 16)) ^ shift(T0[(r0.C2 >> 24) & 255], 8));
            r0.C0 = (((T0[shift & 255] ^ shift(T0[(i >> 8) & 255], 24)) ^ shift(T0[(shift2 >> 16) & 255], 16)) ^ shift(T0[(i2 >> 24) & 255], 8)) ^ iArr[i3][0];
            r0.C1 = (((T0[i & 255] ^ shift(T0[(shift2 >> 8) & 255], 24)) ^ shift(T0[(i2 >> 16) & 255], 16)) ^ shift(T0[(shift >> 24) & 255], 8)) ^ iArr[i3][1];
            r0.C2 = (((T0[shift2 & 255] ^ shift(T0[(i2 >> 8) & 255], 24)) ^ shift(T0[(shift >> 16) & 255], 16)) ^ shift(T0[(i >> 24) & 255], 8)) ^ iArr[i3][2];
            i2 = ((T0[i2 & 255] ^ shift(T0[(shift >> 8) & 255], 24)) ^ shift(T0[(i >> 16) & 255], 16)) ^ shift(T0[(shift2 >> 24) & 255], 8);
            shift = i3 + 1;
            r0.C3 = i2 ^ iArr[i3][3];
            i2 = shift;
            i = 3;
        }
        shift = (((T0[r0.C0 & 255] ^ shift(T0[(r0.C1 >> 8) & 255], 24)) ^ shift(T0[(r0.C2 >> 16) & 255], 16)) ^ shift(T0[(r0.C3 >> 24) & 255], 8)) ^ iArr[i2][0];
        shift2 = (((T0[r0.C1 & 255] ^ shift(T0[(r0.C2 >> 8) & 255], 24)) ^ shift(T0[(r0.C3 >> 16) & 255], 16)) ^ shift(T0[(r0.C0 >> 24) & 255], 8)) ^ iArr[i2][1];
        int shift3 = (((T0[r0.C2 & 255] ^ shift(T0[(r0.C3 >> 8) & 255], 24)) ^ shift(T0[(r0.C0 >> 16) & 255], 16)) ^ shift(T0[(r0.C1 >> 24) & 255], 8)) ^ iArr[i2][2];
        int i4 = i2 + 1;
        i2 = iArr[i2][i] ^ (((T0[r0.C3 & 255] ^ shift(T0[(r0.C0 >> 8) & 255], 24)) ^ shift(T0[(r0.C1 >> 16) & 255], 16)) ^ shift(T0[(r0.C2 >> 24) & 255], 8));
        r0.C0 = iArr[i4][0] ^ (((((f64S[(shift2 >> 8) & 255] & 255) << 8) ^ (f64S[shift & 255] & 255)) ^ ((f64S[(shift3 >> 16) & 255] & 255) << 16)) ^ (f64S[(i2 >> 24) & 255] << 24));
        r0.C1 = ((((f64S[shift2 & 255] & 255) ^ ((f64S[(shift3 >> 8) & 255] & 255) << 8)) ^ ((f64S[(i2 >> 16) & 255] & 255) << 16)) ^ (f64S[(shift >> 24) & 255] << 24)) ^ iArr[i4][1];
        r0.C2 = ((((f64S[shift3 & 255] & 255) ^ ((f64S[(i2 >> 8) & 255] & 255) << 8)) ^ ((f64S[(shift >> 16) & 255] & 255) << 16)) ^ (f64S[(shift2 >> 24) & 255] << 24)) ^ iArr[i4][2];
        r0.C3 = iArr[i4][3] ^ ((((f64S[i2 & 255] & 255) ^ ((f64S[(shift >> 8) & 255] & 255) << 8)) ^ ((f64S[(shift2 >> 16) & 255] & 255) << 16)) ^ (f64S[(shift3 >> 24) & 255] << 24));
    }

    private int subWord(int i) {
        return (f64S[(i >> 24) & 255] << 24) | (((f64S[i & 255] & 255) | ((f64S[(i >> 8) & 255] & 255) << 8)) | ((f64S[(i >> 16) & 255] & 255) << 16));
    }

    static {
        byte[] bArr = new byte[256];
        bArr[0] = (byte) 99;
        bArr[1] = (byte) 124;
        bArr[2] = (byte) 119;
        bArr[3] = (byte) 123;
        bArr[4] = (byte) -14;
        bArr[5] = (byte) 107;
        bArr[6] = (byte) 111;
        bArr[7] = (byte) -59;
        bArr[8] = (byte) 48;
        bArr[9] = (byte) 1;
        bArr[10] = (byte) 103;
        bArr[11] = (byte) 43;
        bArr[12] = (byte) -2;
        bArr[13] = (byte) -41;
        bArr[14] = (byte) -85;
        bArr[15] = (byte) 118;
        bArr[16] = (byte) -54;
        bArr[17] = (byte) -126;
        bArr[18] = (byte) -55;
        bArr[19] = (byte) 125;
        bArr[20] = (byte) -6;
        bArr[21] = (byte) 89;
        bArr[22] = (byte) 71;
        bArr[23] = (byte) -16;
        bArr[24] = (byte) -83;
        bArr[25] = (byte) -44;
        bArr[26] = (byte) -94;
        bArr[27] = (byte) -81;
        bArr[28] = (byte) -100;
        bArr[29] = (byte) -92;
        bArr[30] = (byte) 114;
        bArr[31] = (byte) -64;
        bArr[32] = (byte) -73;
        bArr[33] = (byte) -3;
        bArr[34] = (byte) -109;
        bArr[35] = (byte) 38;
        bArr[36] = (byte) 54;
        bArr[37] = (byte) 63;
        bArr[38] = (byte) -9;
        bArr[39] = (byte) -52;
        bArr[40] = (byte) 52;
        bArr[41] = (byte) -91;
        bArr[42] = (byte) -27;
        bArr[43] = (byte) -15;
        bArr[44] = (byte) 113;
        bArr[45] = (byte) -40;
        bArr[46] = (byte) 49;
        bArr[47] = Ascii.NAK;
        bArr[48] = (byte) 4;
        bArr[49] = (byte) -57;
        bArr[50] = (byte) 35;
        bArr[51] = (byte) -61;
        bArr[52] = Ascii.CAN;
        bArr[53] = (byte) -106;
        bArr[54] = (byte) 5;
        bArr[55] = (byte) -102;
        bArr[56] = (byte) 7;
        bArr[57] = Ascii.DC2;
        bArr[58] = Byte.MIN_VALUE;
        bArr[59] = (byte) -30;
        bArr[60] = (byte) -21;
        bArr[61] = (byte) 39;
        bArr[62] = (byte) -78;
        bArr[63] = (byte) 117;
        bArr[64] = (byte) 9;
        bArr[65] = (byte) -125;
        bArr[66] = (byte) 44;
        bArr[67] = Ascii.SUB;
        bArr[68] = Ascii.ESC;
        bArr[69] = (byte) 110;
        bArr[70] = (byte) 90;
        bArr[71] = (byte) -96;
        bArr[72] = (byte) 82;
        bArr[73] = (byte) 59;
        bArr[74] = (byte) -42;
        bArr[75] = (byte) -77;
        bArr[76] = (byte) 41;
        bArr[77] = (byte) -29;
        bArr[78] = (byte) 47;
        bArr[79] = (byte) -124;
        bArr[80] = (byte) 83;
        bArr[81] = (byte) -47;
        bArr[83] = (byte) -19;
        bArr[84] = (byte) 32;
        bArr[85] = (byte) -4;
        bArr[86] = (byte) -79;
        bArr[87] = (byte) 91;
        bArr[88] = (byte) 106;
        bArr[89] = (byte) -53;
        bArr[90] = (byte) -66;
        bArr[91] = (byte) 57;
        bArr[92] = (byte) 74;
        bArr[93] = (byte) 76;
        bArr[94] = (byte) 88;
        bArr[95] = (byte) -49;
        bArr[96] = (byte) -48;
        bArr[97] = (byte) -17;
        bArr[98] = (byte) -86;
        bArr[99] = (byte) -5;
        bArr[100] = (byte) 67;
        bArr[101] = (byte) 77;
        bArr[102] = (byte) 51;
        bArr[103] = (byte) -123;
        bArr[104] = (byte) 69;
        bArr[105] = (byte) -7;
        bArr[106] = (byte) 2;
        bArr[107] = Byte.MAX_VALUE;
        bArr[108] = (byte) 80;
        bArr[109] = (byte) 60;
        bArr[110] = (byte) -97;
        bArr[111] = (byte) -88;
        bArr[112] = (byte) 81;
        bArr[113] = (byte) -93;
        bArr[114] = (byte) 64;
        bArr[115] = (byte) -113;
        bArr[116] = (byte) -110;
        bArr[117] = (byte) -99;
        bArr[118] = (byte) 56;
        bArr[119] = (byte) -11;
        bArr[120] = (byte) -68;
        bArr[121] = (byte) -74;
        bArr[CharsetProber.ASCII_Z] = (byte) -38;
        bArr[123] = (byte) 33;
        bArr[ModelPPM.MAX_FREQ] = (byte) 16;
        bArr[125] = (byte) -1;
        bArr[Big5DistributionAnalysis.LOWBYTE_END_1] = (byte) -13;
        bArr[127] = (byte) -46;
        bArr[128] = (byte) -51;
        bArr[129] = Ascii.FF;
        bArr[130] = (byte) 19;
        bArr[131] = (byte) -20;
        bArr[132] = (byte) 95;
        bArr[133] = (byte) -105;
        bArr[TsExtractor.TS_STREAM_TYPE_SPLICE_INFO] = (byte) 68;
        bArr[TsExtractor.TS_STREAM_TYPE_E_AC3] = Ascii.ETB;
        bArr[136] = (byte) -60;
        bArr[137] = (byte) -89;
        bArr[TsExtractor.TS_STREAM_TYPE_DTS] = (byte) 126;
        bArr[139] = (byte) 61;
        bArr[140] = (byte) 100;
        bArr[141] = (byte) 93;
        bArr[EUCJPContextAnalysis.SINGLE_SHIFT_2] = Ascii.EM;
        bArr[EUCJPContextAnalysis.SINGLE_SHIFT_3] = (byte) 115;
        bArr[144] = (byte) 96;
        bArr[145] = (byte) -127;
        bArr[146] = (byte) 79;
        bArr[147] = (byte) -36;
        bArr[148] = (byte) 34;
        bArr[149] = (byte) 42;
        bArr[150] = (byte) -112;
        bArr[151] = (byte) -120;
        bArr[152] = (byte) 70;
        bArr[153] = (byte) -18;
        bArr[154] = (byte) -72;
        bArr[155] = Ascii.DC4;
        bArr[156] = (byte) -34;
        bArr[157] = (byte) 94;
        bArr[158] = Ascii.VT;
        bArr[159] = (byte) -37;
        bArr[160] = (byte) -32;
        bArr[161] = (byte) 50;
        bArr[162] = (byte) 58;
        bArr[163] = (byte) 10;
        bArr[164] = (byte) 73;
        bArr[165] = (byte) 6;
        bArr[166] = (byte) 36;
        bArr[167] = (byte) 92;
        bArr[168] = (byte) -62;
        bArr[169] = (byte) -45;
        bArr[170] = (byte) -84;
        bArr[171] = (byte) 98;
        bArr[172] = (byte) -111;
        bArr[173] = (byte) -107;
        bArr[174] = (byte) -28;
        bArr[175] = (byte) 121;
        bArr[176] = (byte) -25;
        bArr[177] = (byte) -56;
        bArr[178] = (byte) 55;
        bArr[179] = (byte) 109;
        bArr[180] = (byte) -115;
        bArr[181] = (byte) -43;
        bArr[182] = (byte) 78;
        bArr[183] = (byte) -87;
        bArr[184] = (byte) 108;
        bArr[185] = (byte) 86;
        bArr[186] = (byte) -12;
        bArr[187] = (byte) -22;
        bArr[188] = (byte) 101;
        bArr[PsExtractor.PRIVATE_STREAM_1] = (byte) 122;
        bArr[190] = (byte) -82;
        bArr[191] = (byte) 8;
        bArr[192] = (byte) -70;
        bArr[193] = (byte) 120;
        bArr[194] = (byte) 37;
        bArr[195] = (byte) 46;
        bArr[EUCTWDistributionAnalysis.HIGHBYTE_BEGIN] = Ascii.FS;
        bArr[197] = (byte) -90;
        bArr[198] = (byte) -76;
        bArr[199] = (byte) -58;
        bArr[Callback.DEFAULT_DRAG_ANIMATION_DURATION] = (byte) -24;
        bArr[201] = (byte) -35;
        bArr[202] = (byte) 116;
        bArr[203] = Ascii.US;
        bArr[204] = (byte) 75;
        bArr[205] = (byte) -67;
        bArr[206] = (byte) -117;
        bArr[207] = (byte) -118;
        bArr[208] = (byte) 112;
        bArr[209] = (byte) 62;
        bArr[210] = (byte) -75;
        bArr[211] = (byte) 102;
        bArr[212] = (byte) 72;
        bArr[213] = (byte) 3;
        bArr[214] = (byte) -10;
        bArr[215] = Ascii.SO;
        bArr[216] = (byte) 97;
        bArr[217] = (byte) 53;
        bArr[218] = (byte) 87;
        bArr[219] = (byte) -71;
        bArr[220] = (byte) -122;
        bArr[221] = (byte) -63;
        bArr[222] = Ascii.GS;
        bArr[223] = (byte) -98;
        bArr[224] = (byte) -31;
        bArr[225] = (byte) -8;
        bArr[226] = (byte) -104;
        bArr[227] = (byte) 17;
        bArr[228] = (byte) 105;
        bArr[229] = (byte) -39;
        bArr[230] = (byte) -114;
        bArr[231] = (byte) -108;
        bArr[232] = (byte) -101;
        bArr[233] = Ascii.RS;
        bArr[HebrewProber.FINAL_KAF] = (byte) -121;
        bArr[HebrewProber.NORMAL_KAF] = (byte) -23;
        bArr[236] = (byte) -50;
        bArr[HebrewProber.FINAL_MEM] = (byte) 85;
        bArr[HebrewProber.NORMAL_MEM] = (byte) 40;
        bArr[239] = (byte) -33;
        bArr[240] = (byte) -116;
        bArr[SJISContextAnalysis.HIRAGANA_LOWBYTE_END] = (byte) -95;
        bArr[242] = (byte) -119;
        bArr[243] = Ascii.CR;
        bArr[HebrewProber.NORMAL_PE] = (byte) -65;
        bArr[HebrewProber.FINAL_TSADI] = (byte) -26;
        bArr[HebrewProber.NORMAL_TSADI] = (byte) 66;
        bArr[247] = (byte) 104;
        bArr[248] = (byte) 65;
        bArr[249] = (byte) -103;
        bArr[250] = (byte) 45;
        bArr[251] = Ascii.SI;
        bArr[252] = (byte) -80;
        bArr[253] = (byte) 84;
        bArr[254] = (byte) -69;
        bArr[255] = Ascii.SYN;
        f64S = bArr;
        int[] iArr = new int[256];
        iArr[0] = -1520213050;
        iArr[1] = -2072216328;
        iArr[2] = -1720223762;
        iArr[3] = -1921287178;
        iArr[4] = 234025727;
        iArr[5] = -1117033514;
        iArr[6] = -1318096930;
        iArr[7] = 1422247313;
        iArr[8] = 1345335392;
        iArr[9] = 50397442;
        iArr[10] = -1452841010;
        iArr[11] = 2099981142;
        iArr[12] = 436141799;
        iArr[13] = 1658312629;
        iArr[14] = -424957107;
        iArr[15] = -1703512340;
        iArr[16] = 1170918031;
        iArr[17] = -1652391393;
        iArr[18] = 1086966153;
        iArr[19] = -2021818886;
        iArr[20] = 368769775;
        iArr[21] = -346465870;
        iArr[22] = -918075506;
        iArr[23] = 200339707;
        iArr[24] = -324162239;
        iArr[25] = 1742001331;
        iArr[26] = -39673249;
        iArr[27] = -357585083;
        iArr[28] = -1080255453;
        iArr[29] = -140204973;
        iArr[30] = -1770884380;
        iArr[31] = 1539358875;
        iArr[32] = -1028147339;
        iArr[33] = 486407649;
        iArr[34] = -1366060227;
        iArr[35] = 1780885068;
        iArr[36] = 1513502316;
        iArr[37] = 1094664062;
        iArr[38] = 49805301;
        iArr[39] = 1338821763;
        iArr[40] = 1546925160;
        iArr[41] = -190470831;
        iArr[42] = 887481809;
        iArr[43] = 150073849;
        iArr[44] = -1821281822;
        iArr[45] = 1943591083;
        iArr[46] = 1395732834;
        iArr[47] = 1058346282;
        iArr[48] = 201589768;
        iArr[49] = 1388824469;
        iArr[50] = 1696801606;
        iArr[51] = 1589887901;
        iArr[52] = 672667696;
        iArr[53] = -1583966665;
        iArr[54] = 251987210;
        iArr[55] = -1248159185;
        iArr[56] = 151455502;
        iArr[57] = 907153956;
        iArr[58] = -1686077413;
        iArr[59] = 1038279391;
        iArr[60] = 652995533;
        iArr[61] = 1764173646;
        iArr[62] = -843926913;
        iArr[63] = -1619692054;
        iArr[64] = 453576978;
        iArr[65] = -1635548387;
        iArr[66] = 1949051992;
        iArr[67] = 773462580;
        iArr[68] = 756751158;
        iArr[69] = -1301385508;
        iArr[70] = -296068428;
        iArr[71] = -73359269;
        iArr[72] = -162377052;
        iArr[73] = 1295727478;
        iArr[74] = 1641469623;
        iArr[75] = -827083907;
        iArr[76] = 2066295122;
        iArr[77] = 1055122397;
        iArr[78] = 1898917726;
        iArr[79] = -1752923117;
        iArr[80] = -179088474;
        iArr[81] = 1758581177;
        iArr[83] = 753790401;
        iArr[84] = 1612718144;
        iArr[85] = 536673507;
        iArr[86] = -927878791;
        iArr[87] = -312779850;
        iArr[88] = -1100322092;
        iArr[89] = 1187761037;
        iArr[90] = -641810841;
        iArr[91] = 1262041458;
        iArr[92] = -565556588;
        iArr[93] = -733197160;
        iArr[94] = -396863312;
        iArr[95] = 1255133061;
        iArr[96] = 1808847035;
        iArr[97] = 720367557;
        iArr[98] = -441800113;
        iArr[99] = 385612781;
        iArr[100] = -985447546;
        iArr[101] = -682799718;
        iArr[102] = 1429418854;
        iArr[103] = -1803188975;
        iArr[104] = -817543798;
        iArr[105] = 284817897;
        iArr[106] = 100794884;
        iArr[107] = -2122350594;
        iArr[108] = -263171936;
        iArr[109] = 1144798328;
        iArr[110] = -1163944155;
        iArr[111] = -475486133;
        iArr[112] = -212774494;
        iArr[113] = -22830243;
        iArr[114] = -1069531008;
        iArr[115] = -1970303227;
        iArr[116] = -1382903233;
        iArr[117] = -1130521311;
        iArr[118] = 1211644016;
        iArr[119] = 83228145;
        iArr[120] = -541279133;
        iArr[121] = -1044990345;
        iArr[CharsetProber.ASCII_Z] = 1977277103;
        iArr[123] = 1663115586;
        iArr[ModelPPM.MAX_FREQ] = 806359072;
        iArr[125] = 452984805;
        iArr[Big5DistributionAnalysis.LOWBYTE_END_1] = 250868733;
        iArr[127] = 1842533055;
        iArr[128] = 1288555905;
        iArr[129] = 336333848;
        iArr[130] = 890442534;
        iArr[131] = 804056259;
        iArr[132] = -513843266;
        iArr[133] = -1567123659;
        iArr[TsExtractor.TS_STREAM_TYPE_SPLICE_INFO] = -867941240;
        iArr[TsExtractor.TS_STREAM_TYPE_E_AC3] = 957814574;
        iArr[136] = 1472513171;
        iArr[137] = -223893675;
        iArr[TsExtractor.TS_STREAM_TYPE_DTS] = -2105639172;
        iArr[139] = 1195195770;
        iArr[140] = -1402706744;
        iArr[141] = -413311558;
        iArr[EUCJPContextAnalysis.SINGLE_SHIFT_2] = 723065138;
        iArr[EUCJPContextAnalysis.SINGLE_SHIFT_3] = -1787595802;
        iArr[144] = -1604296512;
        iArr[145] = -1736343271;
        iArr[146] = -783331426;
        iArr[147] = 2145180835;
        iArr[148] = 1713513028;
        iArr[149] = 2116692564;
        iArr[150] = -1416589253;
        iArr[151] = -2088204277;
        iArr[152] = -901364084;
        iArr[153] = 703524551;
        iArr[154] = -742868885;
        iArr[155] = 1007948840;
        iArr[156] = 2044649127;
        iArr[157] = -497131844;
        iArr[158] = 487262998;
        iArr[159] = 1994120109;
        iArr[160] = 1004593371;
        iArr[161] = 1446130276;
        iArr[162] = 1312438900;
        iArr[163] = 503974420;
        iArr[164] = -615954030;
        iArr[165] = 168166924;
        iArr[166] = 1814307912;
        iArr[167] = -463709000;
        iArr[168] = 1573044895;
        iArr[169] = 1859376061;
        iArr[170] = -273896381;
        iArr[171] = -1503501628;
        iArr[172] = -1466855111;
        iArr[173] = -1533700815;
        iArr[174] = 937747667;
        iArr[175] = -1954973198;
        iArr[176] = 854058965;
        iArr[177] = 1137232011;
        iArr[178] = 1496790894;
        iArr[179] = -1217565222;
        iArr[180] = -1936880383;
        iArr[181] = 1691735473;
        iArr[182] = -766620004;
        iArr[183] = -525751991;
        iArr[184] = -1267962664;
        iArr[185] = -95005012;
        iArr[186] = 133494003;
        iArr[187] = 636152527;
        iArr[188] = -1352309302;
        iArr[PsExtractor.PRIVATE_STREAM_1] = -1904575756;
        iArr[190] = -374428089;
        iArr[191] = 403179536;
        iArr[192] = -709182865;
        iArr[193] = -2005370640;
        iArr[194] = 1864705354;
        iArr[195] = 1915629148;
        iArr[EUCTWDistributionAnalysis.HIGHBYTE_BEGIN] = 605822008;
        iArr[197] = -240736681;
        iArr[198] = -944458637;
        iArr[199] = 1371981463;
        iArr[Callback.DEFAULT_DRAG_ANIMATION_DURATION] = 602466507;
        iArr[201] = 2094914977;
        iArr[202] = -1670089496;
        iArr[203] = 555687742;
        iArr[204] = -582268010;
        iArr[205] = -591544991;
        iArr[206] = -2037675251;
        iArr[207] = -2054518257;
        iArr[208] = -1871679264;
        iArr[209] = 1111375484;
        iArr[210] = -994724495;
        iArr[211] = -1436129588;
        iArr[212] = -666351472;
        iArr[213] = 84083462;
        iArr[214] = 32962295;
        iArr[215] = 302911004;
        iArr[216] = -1553899070;
        iArr[217] = 1597322602;
        iArr[218] = -111716434;
        iArr[219] = -793134743;
        iArr[220] = -1853454825;
        iArr[221] = 1489093017;
        iArr[222] = 656219450;
        iArr[223] = -1180787161;
        iArr[224] = 954327513;
        iArr[225] = 335083755;
        iArr[226] = -1281845205;
        iArr[227] = 856756514;
        iArr[228] = -1150719534;
        iArr[229] = 1893325225;
        iArr[230] = -1987146233;
        iArr[231] = -1483434957;
        iArr[232] = -1231316179;
        iArr[233] = 572399164;
        iArr[HebrewProber.FINAL_KAF] = -1836611819;
        iArr[HebrewProber.NORMAL_KAF] = 552200649;
        iArr[236] = 1238290055;
        iArr[HebrewProber.FINAL_MEM] = -11184726;
        iArr[HebrewProber.NORMAL_MEM] = 2015897680;
        iArr[239] = 2061492133;
        iArr[240] = -1886614525;
        iArr[SJISContextAnalysis.HIRAGANA_LOWBYTE_END] = -123625127;
        iArr[242] = -2138470135;
        iArr[243] = 386731290;
        iArr[HebrewProber.NORMAL_PE] = -624967835;
        iArr[HebrewProber.FINAL_TSADI] = 837215959;
        iArr[HebrewProber.NORMAL_TSADI] = -968736124;
        iArr[247] = -1201116976;
        iArr[248] = -1019133566;
        iArr[249] = -1332111063;
        iArr[250] = 1999449434;
        iArr[251] = 286199582;
        iArr[252] = -877612933;
        iArr[253] = -61582168;
        iArr[254] = -692339859;
        iArr[255] = 974525996;
        T0 = iArr;
    }
}
